}
#Inputting parameters
cluster_reso <- c(0.4,0.8, 1.2, 1.6, 2.0, 2.4)
myDF <- mapply(myoptim, reso = cluster_reso, MoreArgs = list(myObj="hpf18_seurat"),
SIMPLIFY = FALSE)
myDF <- do.call(rbind, myDF)
clustering_optim <- myDF %>%
group_by(reso_used, WithinTBCluster)%>%
summarize(numbers = n())%>%
mutate(percentage = numbers / sum(numbers) * 100)
adjusted_rand_index <- myDF %>%
group_by(reso_used) %>%
mutate(ARI = adjustedRandIndex(seurat_clusters_names, clusterNames)) %>%
dplyr::select(reso_used, ARI) %>%
distinct()
entropy <- myDF %>%
group_by(reso_used)%>%
mutate(entropy = NMF::entropy(as.factor(seurat_clusters_names),   as.factor(clusterNames), method = "mean")) %>%
dplyr::select(reso_used,entropy) %>%
distinct()
clustering_optim <- list(adjusted_rand_index, clustering_optim, entropy) %>% purrr::reduce(left_join, by = "reso_used")
clustering_optim$ARI[duplicated(clustering_optim$ARI)] <- NA
clustering_optim$entropy[duplicated(clustering_optim$entropy)] <- NA
clustering_optim$reso_used <-paste("res=", clustering_optim$reso_used)
# Adjusting order of factors
clustering_optim$WithinTBCluster <- factor(clustering_optim$WithinTBCluster,
levels = c("in_both", "in_authors_only", "in_mine_only"))
# Facet plot: proportion falling into diff categories while varying k and res
multiplot <- ggplot(clustering_optim, aes(x = WithinTBCluster, y = percentage)) +
geom_bar(data = clustering_optim, mapping = aes(fill = WithinTBCluster), stat =
"identity") +
facet_wrap(vars(reso_used), ncol=3) +
geom_text(aes(label = sprintf("%.1f", percentage), group = WithinTBCluster),angle=0,
size = 3, position = position_dodge(width = 1),vjust = 0.7, colour =
"grey5",fontface = "bold") +
geom_text(aes(label = ifelse(is.na(ARI), "",  paste("ARI =", sprintf("%.3f", ARI), sep =" ")), group = reso_used),inherit.aes=FALSE, x = 2.9, y= 80, size =3) +
geom_text(aes(label = ifelse(is.na(entropy), "",  paste("H =", sprintf("%.3f",
entropy), sep
=" ")), group = reso_used),
inherit.aes=FALSE, x = 2.9, y= 70, size =3) +
scale_fill_brewer(palette = "Accent", labels = c("shared", "in authors' cluster only",
"in my assigned cluster only"),name =
"Cluster Assignments") +
theme_bw()+
theme(axis.text.x = element_text(angle=60, hjust=1),axis.title.x=element_blank(), text=element_text(family="Arial"))
multiplot
multiplot <- ggplot(clustering_optim, aes(x = WithinTBCluster, y = percentage)) +
geom_bar(data = clustering_optim, mapping = aes(fill = WithinTBCluster), stat =
"identity") +
facet_wrap(vars(reso_used), ncol=3) +
geom_text(aes(label = sprintf("%.1f", percentage), group = WithinTBCluster),angle=0,
size = 3, position = position_dodge(width = 1),vjust = 0.7, colour =
"grey5",fontface = "bold") +
geom_text(aes(label = ifelse(is.na(ARI), "",  paste("ARI =", sprintf("%.3f", ARI), sep =" ")), group = reso_used),inherit.aes=FALSE, x = 2.7, y= 80, size =3) +
geom_text(aes(label = ifelse(is.na(entropy), "",  paste("H =", sprintf("%.3f",
entropy), sep
=" ")), group = reso_used),
inherit.aes=FALSE, x = 2.9, y= 70, size =3) +
scale_fill_brewer(palette = "Accent", labels = c("shared", "in authors' cluster only",
"in my assigned cluster only"),name =
"Cluster Assignments") +
theme_bw()+
theme(axis.text.x = element_text(angle=60, hjust=1),axis.title.x=element_blank(), text=element_text(family="Arial"))
multiplot
=" ")), group = reso_used),
multiplot <- ggplot(clustering_optim, aes(x = WithinTBCluster, y = percentage)) +
geom_bar(data = clustering_optim, mapping = aes(fill = WithinTBCluster), stat =
"identity") +
facet_wrap(vars(reso_used), ncol=3) +
geom_text(aes(label = sprintf("%.1f", percentage), group = WithinTBCluster),angle=0,
size = 3, position = position_dodge(width = 1),vjust = 0.7, colour =
"grey5",fontface = "bold") +
geom_text(aes(label = ifelse(is.na(ARI), "",  paste("ARI =", sprintf("%.3f", ARI), sep =" ")), group = reso_used),inherit.aes=FALSE, x = 2.7, y= 80, size =3) +
geom_text(aes(label = ifelse(is.na(entropy), "",  paste("H =", sprintf("%.3f",
entropy), sep
=" ")), group = reso_used),
inherit.aes=FALSE, x = 2.7, y= 70, size =3) +
scale_fill_brewer(palette = "Accent", labels = c("shared", "in authors' cluster only",
"in my assigned cluster only"),name =
"Cluster Assignments") +
theme_bw()+
theme(axis.text.x = element_text(angle=60, hjust=1),axis.title.x=element_blank(), text=element_text(family="Arial"))
multiplot
TBcells <- readRDS("rds/TBcells_subclustered.rds")
#Convert to SCE object
TB_sce <- as.SingleCellExperiment(x = TBcells,
assay = "SCT")
table(colData(TB_sce)$subclusters_names)
sce_sling <- slingshot(TB_sce, clusterLabels = "subclusters_names", reducedDim = "UMAP", start.clus = "NMps" )
library(SingleCellExperiment)
library(slingshot)
library(RColorBrewer)
library(tidyverse)
library(Seurat)
library(tradeSeq)
library(clusterExperiment)
library(cowplot)
sce_sling <- slingshot(TB_sce, clusterLabels = "subclusters_names", reducedDim = "UMAP", start.clus = "NMps" )
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
cols <- c(scales::hue_pal()(18), "#FFFFFF") # the number of colors should match the number of clusters
DimPlot(hpf18_seurat, label = TRUE, label.size = 6, pt.size=0.1, reduction = "umap") +
scale_color_manual(values = cols, name = "Cluster Identities", labels = labelList)+ mytheme
cols <- c(scales::hue_pal()(18), "#FFFFFF") # the number of colors should match the number of clusters
DimPlot(hpf18_seurat, label = TRUE, label.size = 4, pt.size=0.1, reduction = "umap") +
scale_color_manual(values = cols, name = "Cluster Identities", labels = labelList)+ mytheme
knitr::opts_chunk$set(echo = TRUE, messages = FALSE, warning = FALSE)
rm(list=ls())
gc()
assoRes <- associationTest(sce)
sce <- readRDS("rds/6_slingshot.rds")
assoRes <- associationTest(sce)
head(assoRes)
(assoRes)
library(SingleCellExperiment)
library(slingshot)
library(RColorBrewer)
library(tidyverse)
library(Seurat)
library(tradeSeq)
library(clusterExperiment)
library(cowplot)
TBcells <- readRDS("rds/TBcells_subclustered.rds")
#Convert to SCE object
TB_sce <- as.SingleCellExperiment(x = TBcells,
assay = "SCT")
table(colData(TB_sce)$subclusters_names)
sce_sling <- slingshot(TB_sce, clusterLabels = "subclusters_names", reducedDim = "UMAP", start.clus = "NMps" )
clusters <- ifelse(colData(TB_sce)$subclusters_names == "NMps", 1,
ifelse(colData(TB_sce)$subclusters_names == "Maturation zone",2,                  ifelse(colData(TB_sce)$subclusters_names == "Posterior PSM", 3,
ifelse(colData(TB_sce)$subclusters_names == "Pou5f3+ Posterior NT", 4,ifelse(colData(TB_sce)$subclusters_names == "Posterior NT", 5,ifelse(colData(TB_sce)$subclusters_names == "Nascent somites", 6,ifelse(colData(TB_sce)$subclusters_names == "Tail somites", 7, NA)))))))
clust_col = data.frame(names = colData(TB_sce)$subclusters_names, clusters = clusters, colors = brewer.pal(9,"Set1")[clusters]) %>% arrange(clusters) %>% distinct()
plot(reducedDims(sce_sling)$UMAP, col = brewer.pal(9,"Set1")[clusters], pch=16, asp = 1)
lines(SlingshotDataSet(sce_sling), lwd=1, type = "lineages", col='black')
legend(-11, -0.7, legend=c("NMps", "Maturation Zone", "Posterior PSM", "Pou5f3+ posterior NT", "Posterior NT", "Nascent Somites", "Tail Somites"), col=clust_col$colors, pch = 16, pt.cex = 0.8, cex = 0.8, bty='n', box.lty=0)
TBcells <- FindVariableFeatures(TBcells)
sce_sling <- sce_sling[VariableFeatures(TBcells),]
counts <- assays(sce_sling)$counts %>% as.matrix
logcounts <- assays(sce_sling)$logcounts %>% as.matrix()
TBcells <- FindVariableFeatures(TBcells)
sce_sling <- sce_sling[VariableFeatures(TBcells),]
counts <- assays(sce_sling)$counts %>% as.matrix
logcounts <- assays(sce_sling)$logcounts %>% as.matrix()
set.seed(5)
icMat <- evaluateK(counts = counts, sds = SlingshotDataSet(sce_sling), k = 3:10,
nGenes = 200, verbose = T)
clustPat <- readRDS(file = "rds/allGenesCluster.rds")
asso_genes <- assoRes %>%
dplyr::filter(pvalue < 1e-5)
asso_genes
asso_genes <- assoRes %>%
dplyr::filter(pvalue < 1e-5)
asso_genes
asso_genes <- assoRes
head(asso_genes)
asso_genes <- assoRes  %>% tibble::rownames_to_column()
head(asso_genes)
asso_genes <- assoRes  %>%
tibble::rownames_to_column() %>%
dplyr::filter(pvalue < 1e-6)
asso_genes
head(asso_genes)
asso_genes <- assoRes  %>%
tibble::rownames_to_column() %>%
dplyr::filter(pvalue < 1e-10)
head(asso_genes)
asso_genes <- assoRes  %>%
tibble::rownames_to_column() %>%
dplyr::filter(pvalue < 1e-6)
head(asso_genes)
(asso_genes)
asso_genes <- assoRes  %>%
tibble::rownames_to_column() %>%
dplyr::filter(pvalue < 1e-10)
(asso_genes)
?clusterExperimentPatterns
?clusterExpressionPatterns
assoRes <- associationTest(sce) %>%
tibble::rownames_to_column() %>%
dplyr::filter(pvalue < 1e-10)
asso_genes <- assoRes$rowname
asso_genes
# Clustering expression patterns
nPointsClus <- 20
#clusterExperiment::listBuiltInFunctions()
clustPat <- clusterExpressionPatterns(sce, nPoints = nPointsClus,
genes = asso_genes)
saveRDS(clustPat, file = "rds/6_clusterExperiment.rds")
clustPat <- readRDS(file = "rds/allGenesCluster.rds")
clustPat <- readRDS(file = "rds/6_clusterExperiment.rds")
clusterLabels <- primaryCluster(clustPat$rsec)
#clustPat
genesWithinClust <- rownames(clustPat$yhatScaled[clusterLabels == 2, ])
(genesWithinClust)[5]
cUniq <- unique(clusterLabels)
cUniq <- cUniq[!cUniq == -1] # remove unclustered genes
cUniq <- sort(cUniq)
plots <- list()
for (xx in cUniq[1:10]) {
cId <- which(clusterLabels == xx)
p <- ggplot(data = data.frame(x = 1:nPointsClus,
y = rep(range(clustPat$yhatScaled[cId, ]),
nPointsClus / 2)),
aes(x = x, y = y)) +
geom_point(alpha = 0) +
labs(title = paste0("Cluster ", xx),  x = "Pseudotime", y = "Normalized expression") +
theme_classic()
for (ii in 1:length(cId)) {
geneId <- rownames(clustPat$yhatScaled)[cId[ii]]
p <- p +
geom_line(data = data.frame(x = rep(1:nPointsClus, 2),
y = clustPat$yhatScaled[geneId, ],
lineage = rep(0:1, each = nPointsClus)),
aes(col = as.character(lineage), group = lineage), lwd = 1.5)
}
p <- p + guides(color = FALSE) +
scale_color_manual(values = c("orange", "darkseagreen3"),
breaks = c("0", "1"))
plots[[as.character(xx)]] <- p
}
plots$ncol <- 3
do.call(cowplot::plot_grid, plots)
# Simulate
set.seed(1)
x1 <- rnorm(10)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
# Set random seed to 1.
set.seed(1)
x1 <- rnorm(10)
# Reset the random seed to 1.
set.seed(1)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
# Sample all 10 in one command.
set.seed(1)
x1 <- rnorm(10)
# Sample two sets of 5 sequentially.
set.seed(1)
y1 <- rnorm(5)
y2 <- rnorm(5)
x2 <- c(y1,y2)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
set.seed(1)
runif(5)
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- runif(1)
seq2 <- runif(5)
df <- data.frame(Seq1=c(old,NA),Seq2=c(NA,new))
# Simulate
set.seed(1)
x1 <- rnorm(10)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
# Set random seed to 1.
set.seed(1)
x1 <- rnorm(10)
# Reset the random seed to 1.
set.seed(1)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- runif(1)
seq2 <- runif(5)
df <- data.frame(Seq1=c(seq1,NA),Seq2=c(seq2))
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- rnorm(1)
seq2 <- runif(5)
df <- data.frame(Seq1=c(seq1,rep(NA,2)), Seq2=c(rep(NA,2),seq2))
knitr::kable(df,digits=3,row.names=TRUE)
devtools::session_info()
library(Seurat)
library(tidyverse)
library(RColorBrewer)
hpf18_seurat <- readRDS(file = "rds/hpf18_seurat_optimized551.rds" )
hpf18_seurat <- readRDS(file = "rds/hpf18_seurat_optimized551.rds" )
# Simulate
set.seed(1)
x1 <- rnorm(10)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
# Set random seed to 1.
set.seed(1)
x1 <- rnorm(10)
# Reset the random seed to 1.
set.seed(1)
x2 <- rnorm(10)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
# Sample all 10 in one command.
set.seed(1)
x1 <- rnorm(10)
# Sample two sets of 5 sequentially.
set.seed(1)
y1 <- rnorm(5)
y2 <- rnorm(5)
x2 <- c(y1,y2)
# Plot
par(mfrow=c(1,2))
hist(x1)
hist(x2)
set.seed(1)
runif(5)
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- runif(1)
seq2 <- runif(5)
df <- data.frame(Seq1=c(seq1,NA),Seq2=c(NA,seq2))
knitr::kable(df,digits=3,row.names=TRUE)
ignore
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- rnorm(1)
seq2 <- runif(5)
df <- data.frame(Seq1=c(seq1,rep(NA,2)), Seq2=c(rep(NA,2),seq2))
knitr::kable(df,digits=3,row.names=TRUE)
RNGkind(normal.kind="Box-Muller")
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- rnorm(1)
seq2 <- runif(5)
set.seed(1)
ignore <- rnorm(2)
seq3 <- runif(5)
seq1
seq2
seq3
RNGkind(normal.kind="default")
set.seed(1)
seq1 <- runif(5)
set.seed(1)
ignore <- rnorm(1)
seq2 <- runif(5)
set.seed(1)
ignore <- rnorm(2)
seq3 <- runif(5)
seq1
seq2
seq3
sce.zeisel <- readRDS("../data/sce.zeisel.rds")
sce.zeisel <- readRDS("./data/sce.zeisel.rds")
library(scater)
library(scran)
plotReducedDim(sce.zeisel, dimred="PCA", colour_by="level1class")
plotReducedDim(sce.zeisel, dimred="PCA", colour_by="level1class", ncomponents=4)
set.seed(100)
# runTSNE() stores the t-SNE coordinates in the reducedDims
# for re-use across multiple plotReducedDim() calls.
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA")
plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class")
set.seed(100)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA")
tsne.plot.1 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA")
tsne.plot.2 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA")
tsne.plot.3 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA")
tsne.plot.4 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE)
multiplot(tsne.plot.1,tsne.plot.2,tsne.plot.3,tsne.plot.4,
layout=matrix(seq(4),nrow=2,byrow=TRUE))
set.seed(100)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA", perplexity=5)
out5 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE) +
ggtitle("perplexity = 5")
set.seed(100)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA", perplexity=20)
out20 <- plotReducedDim(sce.zeisel, dimred="TSNE",colour_by="level1class", add_legend=FALSE) +
ggtitle("perplexity = 20")
set.seed(100)
sce.zeisel <- runTSNE(sce.zeisel, dimred="PCA", perplexity=80)
out80 <- plotReducedDim(sce.zeisel, dimred="TSNE", colour_by="level1class", add_legend=FALSE) +
ggtitle("perplexity = 80")
multiplot(out5, out20, out80, cols=3)
set.seed(100)
sce.zeisel <- runUMAP(sce.zeisel, dimred="PCA")
plotReducedDim(sce.zeisel, dimred="UMAP", colour_by="level1class")
library(scater)
library(scran)
sce.pbmc <- readRDS("./data/pbmc_preproc.rds")
set.seed(100)
clust.kmeans <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=10)
colLabels(sce.pbmc) <- factor(clust.kmeans$cluster)
plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("k-mean Clustering")
set.seed(100)
k <- 3
clust.kmeans <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=k)
colLabels(sce.pbmc) <- factor(clust.kmeans$cluster)
kmeans_3 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label",add_legend=FALSE) +
ggtitle(paste(k, "Clusters"))
k <- 5
clust.kmeans <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=k)
colLabels(sce.pbmc) <- factor(clust.kmeans$cluster)
kmeans_5 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label",add_legend=FALSE) +
ggtitle(paste(k, "Clusters"))
k <- 10
clust.kmeans <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=k)
colLabels(sce.pbmc) <- factor(clust.kmeans$cluster)
kmeans_10 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label",add_legend=FALSE) +
ggtitle(paste(k, "Clusters"))
k <- 20
clust.kmeans <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=k)
colLabels(sce.pbmc) <- factor(clust.kmeans$cluster)
kmeans_20 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label",add_legend=FALSE) +
ggtitle(paste(k, "Clusters"))
multiplot(kmeans_3,kmeans_5,kmeans_10,kmeans_20,layout=matrix(seq(4),nrow=2,byrow=TRUE))
library(cluster)
set.seed(110010101)
gaps <- clusGap(reducedDim(sce.pbmc, "PCA"), kmeans, K.max=15)
# Choose the smallest k for which the gap statistic is within 1 SE of the best k.
best.k <- maxSE(gaps$Tab[,"gap"], gaps$Tab[,"SE.sim"])
plot(gaps$Tab[,"gap"], xlab="Number of clusters", ylab="Gap statistic")
abline(v=best.k, col="red")
N_centers = 5
set.seed(100)
clust.kmeans.pca.space <- kmeans(reducedDim(sce.pbmc, "PCA"), centers=N_centers)
set.seed(100)
clust.kmeans.tsne.space <- kmeans(reducedDim(sce.pbmc, "TSNE"), centers=N_centers)
colLabels(sce.pbmc) <- factor(clust.kmeans.pca.space$cluster)
kmeansPlotPcaSpace <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("Clustered in PCA space")
colLabels(sce.pbmc) <- factor(clust.kmeans.tsne.space$cluster)
kmeansPlotTsneSpace <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("Clustered in tSNE space")
multiplot(kmeansPlotPcaSpace,kmeansPlotTsneSpace,cols=2)
g <- buildSNNGraph(sce.pbmc, k=10, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sce.pbmc) <- factor(clust)
plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("10 nearest neighbours")
# More resolved.
g.8 <- buildSNNGraph(sce.pbmc, k=8, use.dimred = 'PCA')
clust.8 <- igraph::cluster_walktrap(g.8)$membership
colLabels(sce.pbmc) <- factor(clust.8)
graph.clust.8 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("8 nearest neighbours")
# Less resolved.
g.50 <- buildSNNGraph(sce.pbmc, k=50, use.dimred = 'PCA')
clust.50 <- igraph::cluster_walktrap(g.50)$membership
colLabels(sce.pbmc) <- factor(clust.50)
graph.clust.50 <- plotReducedDim(sce.pbmc, "TSNE", colour_by="label") +
ggtitle("50 nearest neighbours")
multiplot(graph.clust.8,graph.clust.50,cols=2)
set.seed(2000)
reducedDim(sce.pbmc, "force") <- igraph::layout_with_fr(g)
plotReducedDim(sce.pbmc, colour_by="label", dimred="force")
set.seed(2000)
reducedDim(sce.pbmc, "force") <- igraph::layout_with_fr(g)
plotReducedDim(sce.pbmc, colour_by="label", dimred="force")
